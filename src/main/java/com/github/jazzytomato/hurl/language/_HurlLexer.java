// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/java/com/github/jazzytomato/hurl/language/_HurlLexer.flex

package com.github.jazzytomato.hurl.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.jazzytomato.hurl.language.psi.HurlTypes.*;


public class _HurlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\0\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\2\23\6\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\3\45\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\45\1\72"+
    "\1\73\1\74\1\45\1\75\1\76\1\77\1\45\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\45\1\106\1\107"+
    "\1\110\1\111\3\45\1\112\1\45\1\113\1\114\1\115"+
    "\1\116\6\0\1\117\32\0\1\120\u01df\0\1\120\177\0"+
    "\13\120\35\0\2\117\5\0\1\120\57\0\1\120\240\0"+
    "\1\120\377\0\u0100\121";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\14\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\31\1\40\1\41\1\42\1\43\1\44\1\0\1\45"+
    "\1\0\1\21\1\46\1\21\1\0\1\46\1\0\1\47"+
    "\1\50\2\31\1\21\15\31\11\0\2\31\1\0\1\51"+
    "\1\21\2\31\1\52\11\31\11\0\1\53\2\31\2\0"+
    "\2\31\1\54\4\31\11\0\1\31\1\55\2\0\1\56"+
    "\1\31\1\0\2\31\12\0\1\31\1\56\3\0\1\54"+
    "\1\0\2\31\25\0\1\57\12\0\1\57\1\0\1\60"+
    "\2\0\1\61\1\0\1\62\1\0\1\63\1\0\1\57"+
    "\3\0\1\64\5\0\1\65\4\0\1\57\1\66\2\0"+
    "\2\57\2\0\2\57\10\0\1\57\2\0\2\57\2\0"+
    "\2\57\1\67\1\70\5\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\122\0\366\0\u0148\0\122\0\122"+
    "\0\122\0\122\0\122\0\122\0\u019a\0\122\0\u01ec\0\122"+
    "\0\122\0\u023e\0\122\0\122\0\u0290\0\122\0\u02e2\0\122"+
    "\0\122\0\u0334\0\u0386\0\u03d8\0\u042a\0\u047c\0\u04ce\0\u0520"+
    "\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba\0\u070c\0\122\0\122"+
    "\0\122\0\u075e\0\u07b0\0\u0802\0\u0854\0\u08a6\0\122\0\122"+
    "\0\122\0\122\0\366\0\u08f8\0\u094a\0\u099c\0\u075e\0\u09ee"+
    "\0\u019a\0\u01ec\0\u0a40\0\122\0\122\0\u0a92\0\u0ae4\0\u0b36"+
    "\0\u0b88\0\u0bda\0\u0c2c\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74\0\u0dc6"+
    "\0\u0e18\0\u0e6a\0\u0ebc\0\u0f0e\0\u0f60\0\u0fb2\0\u1004\0\u1056"+
    "\0\u10a8\0\u10fa\0\u114c\0\u119e\0\u11f0\0\u1242\0\u1294\0\u12e6"+
    "\0\u1338\0\122\0\u0a40\0\u138a\0\u13dc\0\u0334\0\u142e\0\u1480"+
    "\0\u14d2\0\u1524\0\u1576\0\u15c8\0\u161a\0\u166c\0\u16be\0\u1710"+
    "\0\u1762\0\u17b4\0\u1806\0\u1858\0\u18aa\0\u18fc\0\u194e\0\u19a0"+
    "\0\122\0\u19f2\0\u1a44\0\u1a96\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde"+
    "\0\u1c30\0\u1c82\0\u1cd4\0\u1d26\0\u1d78\0\u1dca\0\u1e1c\0\u1e6e"+
    "\0\u1ec0\0\u1f12\0\u1f64\0\u1fb6\0\u2008\0\u205a\0\u0334\0\u20ac"+
    "\0\u20fe\0\u2150\0\u21a2\0\u21f4\0\u2246\0\u2298\0\u22ea\0\u233c"+
    "\0\u238e\0\u23e0\0\u2432\0\u2484\0\u24d6\0\u2528\0\u257a\0\u25cc"+
    "\0\u261e\0\122\0\u2670\0\u26c2\0\u2150\0\122\0\u2714\0\u2766"+
    "\0\u27b8\0\u280a\0\u285c\0\u28ae\0\u2900\0\u2952\0\u29a4\0\u29f6"+
    "\0\u2a48\0\u2a9a\0\u2aec\0\u2b3e\0\u2b90\0\u2be2\0\u2c34\0\u2c86"+
    "\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20\0\u2e72\0\u2ec4\0\u2f16"+
    "\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u30b0\0\u3102\0\u3154\0\u31a6"+
    "\0\u31f8\0\u324a\0\u329c\0\122\0\u32ee\0\u3340\0\122\0\u3392"+
    "\0\122\0\u33e4\0\122\0\u3436\0\u3488\0\u34da\0\u352c\0\u357e"+
    "\0\122\0\u35d0\0\u3622\0\u3674\0\u36c6\0\u3718\0\122\0\u376a"+
    "\0\u37bc\0\u380e\0\u3860\0\u38b2\0\122\0\u3904\0\u3956\0\u39a8"+
    "\0\u39fa\0\u3a4c\0\u3a9e\0\u3af0\0\u3b42\0\u3b94\0\u3be6\0\u3c38"+
    "\0\u3c8a\0\u3cdc\0\u3d2e\0\u3d80\0\u3dd2\0\u3e24\0\u3e76\0\u3ec8"+
    "\0\u3f1a\0\u3f6c\0\u3fbe\0\u4010\0\u4062\0\u40b4\0\122\0\122"+
    "\0\u4106\0\u4158\0\u41aa\0\u41fc\0\u424e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\4\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\2\32\1\33\1\34\1\35\1\32\1\36\1\37\3\32"+
    "\1\40\2\32\1\41\1\42\3\32\1\43\1\44\1\45"+
    "\1\32\1\46\1\47\1\50\1\51\1\52\1\53\3\32"+
    "\1\35\1\32\1\54\4\32\1\55\7\32\1\56\1\57"+
    "\1\60\1\61\2\62\1\2\123\0\2\3\117\0\4\63"+
    "\1\64\57\63\1\65\35\63\2\6\1\0\114\6\1\0"+
    "\1\6\22\0\4\66\113\0\1\67\2\0\4\70\7\0"+
    "\27\67\4\0\1\67\1\0\22\67\23\0\1\71\1\0"+
    "\1\72\1\73\1\0\4\22\7\0\4\32\1\35\22\32"+
    "\4\0\1\67\1\0\3\32\1\35\16\32\37\0\1\74"+
    "\121\0\1\75\107\0\1\67\2\0\4\32\7\0\27\32"+
    "\4\0\1\67\1\0\22\32\25\0\1\67\2\0\4\32"+
    "\7\0\16\32\1\76\10\32\4\0\1\67\1\0\22\32"+
    "\25\0\1\67\2\0\4\32\7\0\4\32\1\77\22\32"+
    "\4\0\1\67\1\0\22\32\23\0\1\71\1\0\1\72"+
    "\2\0\4\100\7\0\27\32\4\0\1\67\1\0\22\32"+
    "\25\0\1\67\2\0\4\32\7\0\4\32\1\101\22\32"+
    "\4\0\1\67\1\0\22\32\25\0\1\67\2\0\4\32"+
    "\7\0\4\32\1\102\16\32\1\103\3\32\4\0\1\67"+
    "\1\0\22\32\25\0\1\67\2\0\4\32\7\0\10\32"+
    "\1\104\5\32\1\105\10\32\4\0\1\67\1\0\22\32"+
    "\25\0\1\67\2\0\4\32\7\0\17\32\1\106\7\32"+
    "\4\0\1\67\1\0\22\32\25\0\1\67\2\0\4\32"+
    "\7\0\1\107\15\32\1\110\2\32\1\111\2\32\1\112"+
    "\2\32\4\0\1\67\1\0\22\32\25\0\1\67\2\0"+
    "\4\32\7\0\21\32\1\113\5\32\4\0\1\67\1\0"+
    "\22\32\25\0\1\67\2\0\4\32\7\0\15\32\1\114"+
    "\11\32\4\0\1\67\1\0\22\32\25\0\1\67\2\0"+
    "\4\32\7\0\10\32\1\115\16\32\4\0\1\67\1\0"+
    "\22\32\43\0\1\116\1\117\1\120\2\0\1\121\1\0"+
    "\1\122\4\0\1\123\1\0\1\124\1\0\1\125\63\0"+
    "\1\67\2\0\4\67\7\0\27\67\4\0\1\67\1\0"+
    "\22\67\77\0\1\126\47\0\1\67\2\0\4\32\7\0"+
    "\27\32\4\0\1\67\1\0\17\32\1\127\2\32\25\0"+
    "\1\67\2\0\4\32\7\0\27\32\4\0\1\67\1\0"+
    "\20\32\1\130\1\32\122\0\1\131\33\0\1\132\74\0"+
    "\2\63\1\0\114\63\1\0\1\63\20\0\1\73\1\0"+
    "\4\66\113\0\1\67\1\73\1\0\4\70\7\0\27\67"+
    "\4\0\1\67\1\0\22\67\30\0\4\133\113\0\1\67"+
    "\2\0\4\32\7\0\15\32\1\134\11\32\4\0\1\67"+
    "\1\0\22\32\25\0\1\67\2\0\4\32\7\0\13\32"+
    "\1\135\13\32\4\0\1\67\1\0\22\32\25\0\1\67"+
    "\1\73\1\0\4\100\7\0\27\32\4\0\1\67\1\0"+
    "\22\32\25\0\1\67\2\0\4\32\7\0\23\32\1\136"+
    "\3\32\4\0\1\67\1\0\22\32\25\0\1\67\2\0"+
    "\4\32\7\0\1\137\26\32\4\0\1\67\1\0\22\32"+
    "\25\0\1\67\2\0\4\32\7\0\23\32\1\140\3\32"+
    "\4\0\1\67\1\0\22\32\25\0\1\67\2\0\4\32"+
    "\7\0\15\32\1\141\11\32\4\0\1\67\1\0\22\32"+
    "\25\0\1\67\2\0\4\32\7\0\2\32\1\141\24\32"+
    "\4\0\1\67\1\0\22\32\25\0\1\67\2\0\4\32"+
    "\7\0\23\32\1\142\3\32\4\0\1\67\1\0\22\32"+
    "\25\0\1\67\2\0\4\32\7\0\23\32\1\143\3\32"+
    "\4\0\1\67\1\0\22\32\25\0\1\67\2\0\4\32"+
    "\7\0\22\32\1\101\4\32\4\0\1\67\1\0\22\32"+
    "\25\0\1\67\2\0\4\32\7\0\16\32\1\144\10\32"+
    "\4\0\1\67\1\0\22\32\25\0\1\67\2\0\4\32"+
    "\7\0\21\32\1\145\1\32\1\136\3\32\4\0\1\67"+
    "\1\0\22\32\25\0\1\67\2\0\4\32\7\0\1\146"+
    "\26\32\4\0\1\67\1\0\22\32\25\0\1\67\2\0"+
    "\4\32\7\0\13\32\1\40\13\32\4\0\1\67\1\0"+
    "\22\32\25\0\1\67\2\0\4\32\7\0\4\32\1\147"+
    "\22\32\4\0\1\67\1\0\22\32\116\0\1\150\103\0"+
    "\1\151\121\0\1\152\12\0\1\153\121\0\1\154\111\0"+
    "\1\155\136\0\1\156\115\0\1\157\125\0\1\160\100\0"+
    "\1\161\47\0\1\67\2\0\4\32\7\0\27\32\4\0"+
    "\1\67\1\0\17\32\1\162\2\32\25\0\1\67\2\0"+
    "\4\32\7\0\27\32\4\0\1\67\1\0\10\32\1\163"+
    "\11\32\7\0\2\131\1\164\112\131\1\165\1\131\1\164"+
    "\1\131\1\164\16\0\1\67\2\0\4\32\7\0\15\32"+
    "\1\166\11\32\4\0\1\67\1\0\22\32\25\0\1\67"+
    "\2\0\4\32\7\0\4\32\1\167\22\32\4\0\1\67"+
    "\1\0\22\32\25\0\1\67\2\0\4\32\7\0\3\32"+
    "\1\136\23\32\4\0\1\67\1\0\22\32\25\0\1\67"+
    "\2\0\4\32\7\0\17\32\1\170\7\32\4\0\1\67"+
    "\1\0\22\32\25\0\1\67\2\0\4\32\7\0\12\32"+
    "\1\136\14\32\4\0\1\67\1\0\22\32\25\0\1\67"+
    "\2\0\4\32\7\0\10\32\1\171\16\32\4\0\1\67"+
    "\1\0\22\32\25\0\1\67\2\0\4\32\7\0\2\32"+
    "\1\172\24\32\4\0\1\67\1\0\22\32\25\0\1\67"+
    "\2\0\4\32\7\0\17\32\1\173\7\32\4\0\1\67"+
    "\1\0\22\32\25\0\1\67\2\0\4\32\7\0\6\32"+
    "\1\174\20\32\4\0\1\67\1\0\22\32\25\0\1\67"+
    "\2\0\4\32\7\0\2\32\1\174\24\32\4\0\1\67"+
    "\1\0\22\32\25\0\1\67\2\0\4\32\7\0\26\32"+
    "\1\136\4\0\1\67\1\0\22\32\116\0\1\175\121\0"+
    "\1\176\117\0\1\177\120\0\1\200\123\0\1\201\104\0"+
    "\1\202\131\0\1\203\130\0\1\204\105\0\1\205\43\0"+
    "\1\67\2\0\4\32\7\0\27\32\4\0\1\67\1\0"+
    "\14\32\1\206\5\32\25\0\1\67\2\0\4\32\7\0"+
    "\27\32\4\0\1\67\1\0\10\32\1\207\11\32\7\0"+
    "\115\164\1\210\4\164\2\211\1\0\112\211\1\212\1\211"+
    "\1\0\1\211\17\0\1\67\2\0\4\32\7\0\4\32"+
    "\1\213\22\32\4\0\1\67\1\0\22\32\25\0\1\67"+
    "\2\0\4\32\7\0\23\32\1\174\3\32\4\0\1\67"+
    "\1\0\22\32\25\0\1\67\1\0\1\214\4\32\7\0"+
    "\27\32\4\0\1\67\1\0\22\32\25\0\1\67\2\0"+
    "\4\32\7\0\16\32\1\215\10\32\4\0\1\67\1\0"+
    "\22\32\25\0\1\67\2\0\4\32\7\0\7\32\1\136"+
    "\17\32\4\0\1\67\1\0\22\32\25\0\1\67\2\0"+
    "\4\32\7\0\5\32\1\216\21\32\4\0\1\67\1\0"+
    "\22\32\25\0\1\67\2\0\4\32\7\0\4\32\1\136"+
    "\22\32\4\0\1\67\1\0\22\32\103\0\1\217\124\0"+
    "\1\220\132\0\1\221\111\0\1\222\123\0\1\223\112\0"+
    "\1\224\136\0\1\225\110\0\1\226\130\0\1\227\31\0"+
    "\1\67\2\0\4\32\1\230\6\0\27\32\4\0\1\67"+
    "\1\0\16\32\1\231\3\32\124\0\1\232\4\0\2\211"+
    "\1\0\112\211\1\233\1\211\1\0\1\211\1\0\2\211"+
    "\1\0\73\211\1\234\16\211\1\235\1\211\1\0\1\211"+
    "\17\0\1\67\2\0\4\32\7\0\2\32\1\101\24\32"+
    "\4\0\1\67\1\0\22\32\22\0\1\236\6\0\1\237"+
    "\1\236\114\0\1\67\2\0\4\32\7\0\15\32\1\240"+
    "\11\32\4\0\1\67\1\0\22\32\25\0\1\67\2\0"+
    "\4\32\7\0\10\32\1\241\16\32\4\0\1\67\1\0"+
    "\22\32\115\0\1\242\105\0\1\243\140\0\1\244\107\0"+
    "\1\245\75\0\1\246\142\0\1\247\124\0\1\250\126\0"+
    "\1\251\127\0\1\252\27\0\1\253\117\0\1\67\2\0"+
    "\4\32\1\230\6\0\27\32\4\0\1\67\1\0\22\32"+
    "\7\0\2\211\1\0\112\211\1\235\1\211\1\0\1\211"+
    "\1\0\2\211\1\0\105\211\1\254\4\211\1\233\1\211"+
    "\1\0\1\211\1\0\2\255\1\0\114\255\1\0\1\255"+
    "\17\0\1\67\2\0\4\32\7\0\22\32\1\136\4\32"+
    "\4\0\1\67\1\0\22\32\25\0\1\67\2\0\4\32"+
    "\7\0\15\32\1\137\11\32\4\0\1\67\1\0\22\32"+
    "\117\0\1\256\45\0\1\257\173\0\1\260\107\0\1\261"+
    "\116\0\1\262\136\0\1\263\120\0\1\264\117\0\1\265"+
    "\74\0\1\266\63\0\1\267\101\0\2\211\1\0\105\211"+
    "\1\270\4\211\1\233\1\211\1\0\1\211\22\0\2\236"+
    "\206\0\1\271\123\0\1\272\104\0\1\273\134\0\1\274"+
    "\120\0\1\275\122\0\1\276\103\0\1\277\137\0\1\300"+
    "\122\0\1\301\11\0\1\267\2\0\110\267\1\302\6\267"+
    "\2\211\1\0\102\211\1\303\7\211\1\233\1\211\1\0"+
    "\1\211\66\0\1\304\144\0\1\305\120\0\1\306\77\0"+
    "\1\307\125\0\1\310\115\0\1\311\142\0\1\312\100\0"+
    "\1\313\142\0\1\314\13\0\1\267\2\0\110\267\1\315"+
    "\6\267\2\211\1\0\22\211\1\316\61\211\1\317\5\211"+
    "\1\233\1\211\1\0\1\211\77\0\1\320\110\0\1\321"+
    "\136\0\1\322\127\0\1\323\110\0\1\324\22\0\1\315"+
    "\1\325\1\0\114\315\1\267\1\315\1\267\2\211\1\0"+
    "\15\211\1\326\74\211\1\233\1\211\1\0\1\211\1\0"+
    "\2\211\1\0\22\211\1\316\67\211\1\233\1\211\1\0"+
    "\1\211\66\0\1\327\143\0\1\330\53\0\1\331\163\0"+
    "\1\332\16\0\2\325\1\0\112\325\1\333\1\325\1\0"+
    "\1\325\1\0\2\211\1\0\15\211\1\334\74\211\1\233"+
    "\1\211\1\0\1\211\66\0\1\335\140\0\1\336\112\0"+
    "\1\337\24\0\2\325\1\0\112\325\1\340\1\325\1\0"+
    "\1\325\1\0\1\334\1\211\1\0\110\334\1\341\3\334"+
    "\1\267\1\334\1\267\106\0\1\342\66\0\1\343\46\0"+
    "\1\340\1\325\1\0\114\340\1\344\1\340\1\344\1\334"+
    "\1\211\1\0\110\334\1\345\3\334\1\267\1\334\1\267"+
    "\102\0\1\346\110\0\1\347\30\0\1\344\2\0\117\344"+
    "\1\345\1\350\1\0\114\345\1\267\1\345\1\267\37\0"+
    "\1\351\170\0\1\352\13\0\2\350\1\0\112\350\1\353"+
    "\1\350\1\0\1\350\72\0\1\354\121\0\1\355\30\0"+
    "\2\350\1\0\112\350\1\356\1\350\1\0\1\350\111\0"+
    "\1\357\113\0\1\360\17\0\1\361\1\350\1\0\73\361"+
    "\1\362\16\361\1\356\1\361\1\344\1\361\1\344\71\0"+
    "\1\363\137\0\1\364\12\0\1\361\1\350\1\0\112\361"+
    "\1\365\1\361\1\344\1\361\1\344\1\361\1\350\1\0"+
    "\105\361\1\366\4\361\1\365\1\361\1\344\1\361\1\344"+
    "\65\0\1\367\121\0\1\370\34\0\1\361\1\350\1\0"+
    "\112\361\1\356\1\361\1\344\1\361\1\344\1\361\1\350"+
    "\1\0\105\361\1\371\4\361\1\365\1\361\1\344\1\361"+
    "\1\344\1\361\1\350\1\0\102\361\1\372\7\361\1\365"+
    "\1\361\1\344\1\361\1\344\1\361\1\350\1\0\22\361"+
    "\1\373\61\361\1\374\5\361\1\365\1\361\1\344\1\361"+
    "\1\344\1\361\1\350\1\0\15\361\1\375\74\361\1\365"+
    "\1\361\1\344\1\361\1\344\1\361\1\350\1\0\22\361"+
    "\1\373\67\361\1\365\1\361\1\344\1\361\1\344\1\361"+
    "\1\350\1\0\15\361\1\345\74\361\1\365\1\361\1\344"+
    "\1\361\1\344";

  private static int [] zzUnpacktrans() {
    int [] result = new int[17056];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\6\11\1\1\1\11"+
    "\1\1\2\11\1\1\2\11\1\1\1\11\1\1\2\11"+
    "\15\1\3\11\5\1\4\11\1\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\2\11\20\1\11\0\2\1\1\0"+
    "\1\11\15\1\11\0\1\11\2\1\2\0\7\1\11\0"+
    "\2\1\2\0\2\1\1\0\2\1\12\0\1\1\1\11"+
    "\3\0\1\11\1\0\2\1\25\0\1\1\12\0\1\1"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\1\3\0\1\11\5\0\1\11\4\0\1\1"+
    "\1\11\2\0\2\1\2\0\2\1\10\0\1\1\2\0"+
    "\2\1\2\0\2\1\2\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _HurlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HurlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ANY;
            }
          // fall through
          case 57: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 58: break;
          case 3:
            { return BANG;
            }
          // fall through
          case 59: break;
          case 4:
            { return QUOTE;
            }
          // fall through
          case 60: break;
          case 5:
            { return COMMENT;
            }
          // fall through
          case 61: break;
          case 6:
            { return DOLLAR;
            }
          // fall through
          case 62: break;
          case 7:
            { return PERCENT;
            }
          // fall through
          case 63: break;
          case 8:
            { return AMPERSAND;
            }
          // fall through
          case 64: break;
          case 9:
            { return LPAR;
            }
          // fall through
          case 65: break;
          case 10:
            { return RPAR;
            }
          // fall through
          case 66: break;
          case 11:
            { return STAR;
            }
          // fall through
          case 67: break;
          case 12:
            { return PLUS;
            }
          // fall through
          case 68: break;
          case 13:
            { return COMMA;
            }
          // fall through
          case 69: break;
          case 14:
            { return DASH;
            }
          // fall through
          case 70: break;
          case 15:
            { return DOT;
            }
          // fall through
          case 71: break;
          case 16:
            { return SLASH;
            }
          // fall through
          case 72: break;
          case 17:
            { return NUMBER;
            }
          // fall through
          case 73: break;
          case 18:
            { return COLON;
            }
          // fall through
          case 74: break;
          case 19:
            { return SEMI;
            }
          // fall through
          case 75: break;
          case 20:
            { return LESS;
            }
          // fall through
          case 76: break;
          case 21:
            { return EQ;
            }
          // fall through
          case 77: break;
          case 22:
            { return GREATER;
            }
          // fall through
          case 78: break;
          case 23:
            { return QMARK;
            }
          // fall through
          case 79: break;
          case 24:
            { return AT;
            }
          // fall through
          case 80: break;
          case 25:
            { return ALPHANUM;
            }
          // fall through
          case 81: break;
          case 26:
            { return LBRACKET;
            }
          // fall through
          case 82: break;
          case 27:
            { return BACKSLASH;
            }
          // fall through
          case 83: break;
          case 28:
            { return RBRACKET;
            }
          // fall through
          case 84: break;
          case 29:
            { return CARET;
            }
          // fall through
          case 85: break;
          case 30:
            { return UNDERSCORE;
            }
          // fall through
          case 86: break;
          case 31:
            { return BACKQUOTE;
            }
          // fall through
          case 87: break;
          case 32:
            { return LBRACE;
            }
          // fall through
          case 88: break;
          case 33:
            { return PIPE;
            }
          // fall through
          case 89: break;
          case 34:
            { return RBRACE;
            }
          // fall through
          case 90: break;
          case 35:
            { return TILDE;
            }
          // fall through
          case 91: break;
          case 36:
            { return BAD_CHARACTER;
            }
          // fall through
          case 92: break;
          case 37:
            { return STRING;
            }
          // fall through
          case 93: break;
          case 38:
            { return IDENTIFIER;
            }
          // fall through
          case 94: break;
          case 39:
            { return LESS_OR_EQUAL;
            }
          // fall through
          case 95: break;
          case 40:
            { return GREATER_OR_EQUAL;
            }
          // fall through
          case 96: break;
          case 41:
            { return JSON_ID;
            }
          // fall through
          case 97: break;
          case 42:
            { return METHOD;
            }
          // fall through
          case 98: break;
          case 43:
            { return BACKQUOTE_3;
            }
          // fall through
          case 99: break;
          case 44:
            { return HTTP_VERSION;
            }
          // fall through
          case 100: break;
          case 45:
            { return NULL;
            }
          // fall through
          case 101: break;
          case 46:
            { return TEMPLATE;
            }
          // fall through
          case 102: break;
          case 47:
            { return URL;
            }
          // fall through
          case 103: break;
          case 48:
            { return S_ASSERTS;
            }
          // fall through
          case 104: break;
          case 49:
            { return S_COOKIES;
            }
          // fall through
          case 105: break;
          case 50:
            { return S_HEADERS;
            }
          // fall through
          case 106: break;
          case 51:
            { return S_OPTIONS;
            }
          // fall through
          case 107: break;
          case 52:
            { return S_CAPTURES;
            }
          // fall through
          case 108: break;
          case 53:
            { return S_BASIC_AUTH;
            }
          // fall through
          case 109: break;
          case 54:
            { return S_FORM_PARAMS;
            }
          // fall through
          case 110: break;
          case 55:
            { return S_MULTIPART_FORM_DATA;
            }
          // fall through
          case 111: break;
          case 56:
            { return S_QUERY_STRING_PARAMS;
            }
          // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
